
Stopwatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000003a6  0000043a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800074  00800074  0000044e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000044e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000480  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008d7  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005f7  00000000  00000000  00000dcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000039b  00000000  00000000  000013c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00001760  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000370  00000000  00000000  000017d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000334  00000000  00000000  00001b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001e78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ea       	ldi	r30, 0xA6	; 166
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 37       	cpi	r26, 0x7B	; 123
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 89 01 	call	0x312	; 0x312 <main>
  8a:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_1>:
	((1<<DA) | (1<<DB) | (1<<DC) | (1<<DD) | (1<<DE) | (1<<DF) | (1<<DG) | (1<<DP)),	//8
	((1<<DA) | (1<<DB) | (1<<DC) | (1<<DD) | (1<<DF) | (1<<DG) | (1<<DP)),				//9
};


ISR(INT0_vect){
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
	count_flag = ~count_flag;
  9e:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
  a2:	80 95       	com	r24
  a4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
}
  a8:	8f 91       	pop	r24
  aa:	0f 90       	pop	r0
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	0f 90       	pop	r0
  b0:	1f 90       	pop	r1
  b2:	18 95       	reti

000000b4 <__vector_2>:

ISR(INT1_vect){
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	8f 93       	push	r24
	cnt = 0;
  c0:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <cnt+0x1>
  c4:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <cnt>
	count_flag = 0;
  c8:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
	PORTD =( 1<< D4); // DIG 4
  cc:	80 e8       	ldi	r24, 0x80	; 128
  ce:	82 bb       	out	0x12, r24	; 18
	PORTC = ~digit[0];
  d0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <digit>
  d4:	80 95       	com	r24
  d6:	85 bb       	out	0x15, r24	; 21
	//_delay_ms(10);
}
  d8:	8f 91       	pop	r24
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <counting>:

void counting(void){
	if (cnt<=9)
  e4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <cnt>
  e8:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <cnt+0x1>
  ec:	8a 30       	cpi	r24, 0x0A	; 10
  ee:	91 05       	cpc	r25, r1
  f0:	bc f4       	brge	.+46     	; 0x120 <counting+0x3c>
	{
		PORTD =( 1<<D4); // DIG 4
  f2:	80 e8       	ldi	r24, 0x80	; 128
  f4:	82 bb       	out	0x12, r24	; 18
		PORTC = ~digit[cnt%10];
  f6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <cnt>
  fa:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <cnt+0x1>
  fe:	6a e0       	ldi	r22, 0x0A	; 10
 100:	70 e0       	ldi	r23, 0x00	; 0
 102:	0e 94 a9 01 	call	0x352	; 0x352 <__divmodhi4>
 106:	fc 01       	movw	r30, r24
 108:	e6 59       	subi	r30, 0x96	; 150
 10a:	ff 4f       	sbci	r31, 0xFF	; 255
 10c:	80 81       	ld	r24, Z
 10e:	80 95       	com	r24
 110:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	8f ed       	ldi	r24, 0xDF	; 223
 114:	9e e2       	ldi	r25, 0x2E	; 46
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <counting+0x32>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <counting+0x38>
 11c:	00 00       	nop
 11e:	08 95       	ret
		_delay_ms(u_delay);
	}
	
	else if ((cnt>9) && (cnt<99))
 120:	9c 01       	movw	r18, r24
 122:	2a 50       	subi	r18, 0x0A	; 10
 124:	31 09       	sbc	r19, r1
 126:	29 35       	cpi	r18, 0x59	; 89
 128:	31 05       	cpc	r19, r1
 12a:	68 f5       	brcc	.+90     	; 0x186 <counting+0xa2>
	{
		PORTD =( 1<<D4); // DIG 4
 12c:	80 e8       	ldi	r24, 0x80	; 128
 12e:	82 bb       	out	0x12, r24	; 18
		PORTC = ~digit[cnt%10];
 130:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <cnt>
 134:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <cnt+0x1>
 138:	2a e0       	ldi	r18, 0x0A	; 10
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	b9 01       	movw	r22, r18
 13e:	0e 94 a9 01 	call	0x352	; 0x352 <__divmodhi4>
 142:	fc 01       	movw	r30, r24
 144:	e6 59       	subi	r30, 0x96	; 150
 146:	ff 4f       	sbci	r31, 0xFF	; 255
 148:	80 81       	ld	r24, Z
 14a:	80 95       	com	r24
 14c:	85 bb       	out	0x15, r24	; 21
 14e:	8f ed       	ldi	r24, 0xDF	; 223
 150:	9e e2       	ldi	r25, 0x2E	; 46
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <counting+0x6e>
 156:	00 c0       	rjmp	.+0      	; 0x158 <counting+0x74>
 158:	00 00       	nop
		_delay_ms(u_delay);
		
		PORTD =( 1<<D3); // DIG 3
 15a:	80 e4       	ldi	r24, 0x40	; 64
 15c:	82 bb       	out	0x12, r24	; 18
		PORTC = ~digit[cnt/10];	
 15e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <cnt>
 162:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <cnt+0x1>
 166:	b9 01       	movw	r22, r18
 168:	0e 94 a9 01 	call	0x352	; 0x352 <__divmodhi4>
 16c:	fb 01       	movw	r30, r22
 16e:	e6 59       	subi	r30, 0x96	; 150
 170:	ff 4f       	sbci	r31, 0xFF	; 255
 172:	80 81       	ld	r24, Z
 174:	80 95       	com	r24
 176:	85 bb       	out	0x15, r24	; 21
 178:	8f ed       	ldi	r24, 0xDF	; 223
 17a:	9e e2       	ldi	r25, 0x2E	; 46
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <counting+0x98>
 180:	00 c0       	rjmp	.+0      	; 0x182 <counting+0x9e>
 182:	00 00       	nop
 184:	08 95       	ret
		//PORTC = ~(digit[cnt/10] | (1<<DP));	
		_delay_ms(u_delay);
	}
			
	else if ((cnt>99) && (cnt<999))
 186:	9c 01       	movw	r18, r24
 188:	24 56       	subi	r18, 0x64	; 100
 18a:	31 09       	sbc	r19, r1
 18c:	23 38       	cpi	r18, 0x83	; 131
 18e:	33 40       	sbci	r19, 0x03	; 3
 190:	08 f0       	brcs	.+2      	; 0x194 <counting+0xb0>
 192:	4e c0       	rjmp	.+156    	; 0x230 <counting+0x14c>
	{
		PORTD =( 1<<D4); // DIG 4
 194:	80 e8       	ldi	r24, 0x80	; 128
 196:	82 bb       	out	0x12, r24	; 18
		PORTC = ~digit[cnt%10];
 198:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <cnt>
 19c:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <cnt+0x1>
 1a0:	2a e0       	ldi	r18, 0x0A	; 10
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	b9 01       	movw	r22, r18
 1a6:	0e 94 a9 01 	call	0x352	; 0x352 <__divmodhi4>
 1aa:	fc 01       	movw	r30, r24
 1ac:	e6 59       	subi	r30, 0x96	; 150
 1ae:	ff 4f       	sbci	r31, 0xFF	; 255
 1b0:	80 81       	ld	r24, Z
 1b2:	80 95       	com	r24
 1b4:	85 bb       	out	0x15, r24	; 21
 1b6:	8f ed       	ldi	r24, 0xDF	; 223
 1b8:	9e e2       	ldi	r25, 0x2E	; 46
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <counting+0xd6>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <counting+0xdc>
 1c0:	00 00       	nop
		_delay_ms(u_delay);
				
		cnt1 = cnt/10;
 1c2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <cnt>
 1c6:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <cnt+0x1>
 1ca:	b9 01       	movw	r22, r18
 1cc:	0e 94 a9 01 	call	0x352	; 0x352 <__divmodhi4>
 1d0:	70 93 78 00 	sts	0x0078, r23	; 0x800078 <cnt1+0x1>
 1d4:	60 93 77 00 	sts	0x0077, r22	; 0x800077 <cnt1>
			
		PORTD =( 1<<D3); // DIG 3
 1d8:	80 e4       	ldi	r24, 0x40	; 64
 1da:	82 bb       	out	0x12, r24	; 18
		PORTC = ~digit[cnt1%10];
 1dc:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <cnt1>
 1e0:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <cnt1+0x1>
 1e4:	b9 01       	movw	r22, r18
 1e6:	0e 94 a9 01 	call	0x352	; 0x352 <__divmodhi4>
 1ea:	fc 01       	movw	r30, r24
 1ec:	e6 59       	subi	r30, 0x96	; 150
 1ee:	ff 4f       	sbci	r31, 0xFF	; 255
 1f0:	80 81       	ld	r24, Z
 1f2:	80 95       	com	r24
 1f4:	85 bb       	out	0x15, r24	; 21
 1f6:	8f ed       	ldi	r24, 0xDF	; 223
 1f8:	9e e2       	ldi	r25, 0x2E	; 46
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <counting+0x116>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <counting+0x11c>
 200:	00 00       	nop
		_delay_ms(u_delay);
			
		PORTD = (1<<D2); // DIG 2
 202:	80 e2       	ldi	r24, 0x20	; 32
 204:	82 bb       	out	0x12, r24	; 18
		PORTC = ~(digit[cnt1/10] | (1<<DP));
 206:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <cnt1>
 20a:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <cnt1+0x1>
 20e:	b9 01       	movw	r22, r18
 210:	0e 94 a9 01 	call	0x352	; 0x352 <__divmodhi4>
 214:	fb 01       	movw	r30, r22
 216:	e6 59       	subi	r30, 0x96	; 150
 218:	ff 4f       	sbci	r31, 0xFF	; 255
 21a:	80 81       	ld	r24, Z
 21c:	80 68       	ori	r24, 0x80	; 128
 21e:	80 95       	com	r24
 220:	85 bb       	out	0x15, r24	; 21
 222:	8f e9       	ldi	r24, 0x9F	; 159
 224:	9f e0       	ldi	r25, 0x0F	; 15
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <counting+0x142>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <counting+0x148>
 22c:	00 00       	nop
 22e:	08 95       	ret
		_delay_ms(d_delay);
	}
			
	else if (cnt>999)
 230:	88 3e       	cpi	r24, 0xE8	; 232
 232:	93 40       	sbci	r25, 0x03	; 3
 234:	0c f4       	brge	.+2      	; 0x238 <counting+0x154>
 236:	6c c0       	rjmp	.+216    	; 0x310 <counting+0x22c>
	{
		PORTD = (1<<D4); // DIG 4
 238:	80 e8       	ldi	r24, 0x80	; 128
 23a:	82 bb       	out	0x12, r24	; 18
		PORTC = ~digit[cnt%10];
 23c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <cnt>
 240:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <cnt+0x1>
 244:	2a e0       	ldi	r18, 0x0A	; 10
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	b9 01       	movw	r22, r18
 24a:	0e 94 a9 01 	call	0x352	; 0x352 <__divmodhi4>
 24e:	fc 01       	movw	r30, r24
 250:	e6 59       	subi	r30, 0x96	; 150
 252:	ff 4f       	sbci	r31, 0xFF	; 255
 254:	80 81       	ld	r24, Z
 256:	80 95       	com	r24
 258:	85 bb       	out	0x15, r24	; 21
 25a:	8f ed       	ldi	r24, 0xDF	; 223
 25c:	9e e2       	ldi	r25, 0x2E	; 46
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <counting+0x17a>
 262:	00 c0       	rjmp	.+0      	; 0x264 <counting+0x180>
 264:	00 00       	nop
		_delay_ms(u_delay);
				
		cnt1 = cnt/10;
 266:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <cnt>
 26a:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <cnt+0x1>
 26e:	b9 01       	movw	r22, r18
 270:	0e 94 a9 01 	call	0x352	; 0x352 <__divmodhi4>
 274:	70 93 78 00 	sts	0x0078, r23	; 0x800078 <cnt1+0x1>
 278:	60 93 77 00 	sts	0x0077, r22	; 0x800077 <cnt1>
		
		PORTD = (1<<D3); // DIG 3
 27c:	80 e4       	ldi	r24, 0x40	; 64
 27e:	82 bb       	out	0x12, r24	; 18
		PORTC = ~digit[cnt1%10];
 280:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <cnt1>
 284:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <cnt1+0x1>
 288:	b9 01       	movw	r22, r18
 28a:	0e 94 a9 01 	call	0x352	; 0x352 <__divmodhi4>
 28e:	fc 01       	movw	r30, r24
 290:	e6 59       	subi	r30, 0x96	; 150
 292:	ff 4f       	sbci	r31, 0xFF	; 255
 294:	80 81       	ld	r24, Z
 296:	80 95       	com	r24
 298:	85 bb       	out	0x15, r24	; 21
 29a:	8f ed       	ldi	r24, 0xDF	; 223
 29c:	9e e2       	ldi	r25, 0x2E	; 46
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <counting+0x1ba>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <counting+0x1c0>
 2a4:	00 00       	nop
		_delay_ms(u_delay);
				
		cnt2 = cnt1/10;
 2a6:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <cnt1>
 2aa:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <cnt1+0x1>
 2ae:	b9 01       	movw	r22, r18
 2b0:	0e 94 a9 01 	call	0x352	; 0x352 <__divmodhi4>
 2b4:	70 93 76 00 	sts	0x0076, r23	; 0x800076 <cnt2+0x1>
 2b8:	60 93 75 00 	sts	0x0075, r22	; 0x800075 <cnt2>
		
		PORTD = (1<<D2); // DIG 2
 2bc:	80 e2       	ldi	r24, 0x20	; 32
 2be:	82 bb       	out	0x12, r24	; 18
		PORTC = ~point_digit[cnt2%10];
 2c0:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <cnt2>
 2c4:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <cnt2+0x1>
 2c8:	b9 01       	movw	r22, r18
 2ca:	0e 94 a9 01 	call	0x352	; 0x352 <__divmodhi4>
 2ce:	fc 01       	movw	r30, r24
 2d0:	e0 5a       	subi	r30, 0xA0	; 160
 2d2:	ff 4f       	sbci	r31, 0xFF	; 255
 2d4:	80 81       	ld	r24, Z
 2d6:	80 95       	com	r24
 2d8:	85 bb       	out	0x15, r24	; 21
 2da:	8f e9       	ldi	r24, 0x9F	; 159
 2dc:	9f e0       	ldi	r25, 0x0F	; 15
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <counting+0x1fa>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <counting+0x200>
 2e4:	00 00       	nop
		_delay_ms(d_delay);
		
		PORTD = (1<<D1); // DIG 1
 2e6:	80 e1       	ldi	r24, 0x10	; 16
 2e8:	82 bb       	out	0x12, r24	; 18
		PORTC = ~digit[cnt2/10];
 2ea:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <cnt2>
 2ee:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <cnt2+0x1>
 2f2:	b9 01       	movw	r22, r18
 2f4:	0e 94 a9 01 	call	0x352	; 0x352 <__divmodhi4>
 2f8:	fb 01       	movw	r30, r22
 2fa:	e6 59       	subi	r30, 0x96	; 150
 2fc:	ff 4f       	sbci	r31, 0xFF	; 255
 2fe:	80 81       	ld	r24, Z
 300:	80 95       	com	r24
 302:	85 bb       	out	0x15, r24	; 21
 304:	8f e9       	ldi	r24, 0x9F	; 159
 306:	9f e0       	ldi	r25, 0x0F	; 15
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <counting+0x224>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <counting+0x22a>
 30e:	00 00       	nop
 310:	08 95       	ret

00000312 <main>:

}


int main(void){
	DDRC = 0xFF;
 312:	8f ef       	ldi	r24, 0xFF	; 255
 314:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xF0;
 316:	80 ef       	ldi	r24, 0xF0	; 240
 318:	81 bb       	out	0x11, r24	; 17
	
	
	MCUCR = 0x0F;
 31a:	8f e0       	ldi	r24, 0x0F	; 15
 31c:	85 bf       	out	0x35, r24	; 53
	GICR = 0xC0;
 31e:	80 ec       	ldi	r24, 0xC0	; 192
 320:	8b bf       	out	0x3b, r24	; 59
	sei();
 322:	78 94       	sei
		
	while (1){

		counting();
 324:	0e 94 72 00 	call	0xe4	; 0xe4 <counting>
		if(count_flag) {
 328:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 32c:	88 23       	and	r24, r24
 32e:	d1 f3       	breq	.-12     	; 0x324 <main+0x12>
			cnt++;
 330:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <cnt>
 334:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <cnt+0x1>
 338:	01 96       	adiw	r24, 0x01	; 1
 33a:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <cnt+0x1>
 33e:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <cnt>
			if (cnt>5999) cnt=0;
 342:	80 37       	cpi	r24, 0x70	; 112
 344:	97 41       	sbci	r25, 0x17	; 23
 346:	74 f3       	brlt	.-36     	; 0x324 <main+0x12>
 348:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <cnt+0x1>
 34c:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <cnt>
 350:	e9 cf       	rjmp	.-46     	; 0x324 <main+0x12>

00000352 <__divmodhi4>:
 352:	97 fb       	bst	r25, 7
 354:	07 2e       	mov	r0, r23
 356:	16 f4       	brtc	.+4      	; 0x35c <__divmodhi4+0xa>
 358:	00 94       	com	r0
 35a:	07 d0       	rcall	.+14     	; 0x36a <__divmodhi4_neg1>
 35c:	77 fd       	sbrc	r23, 7
 35e:	09 d0       	rcall	.+18     	; 0x372 <__divmodhi4_neg2>
 360:	0e 94 bd 01 	call	0x37a	; 0x37a <__udivmodhi4>
 364:	07 fc       	sbrc	r0, 7
 366:	05 d0       	rcall	.+10     	; 0x372 <__divmodhi4_neg2>
 368:	3e f4       	brtc	.+14     	; 0x378 <__divmodhi4_exit>

0000036a <__divmodhi4_neg1>:
 36a:	90 95       	com	r25
 36c:	81 95       	neg	r24
 36e:	9f 4f       	sbci	r25, 0xFF	; 255
 370:	08 95       	ret

00000372 <__divmodhi4_neg2>:
 372:	70 95       	com	r23
 374:	61 95       	neg	r22
 376:	7f 4f       	sbci	r23, 0xFF	; 255

00000378 <__divmodhi4_exit>:
 378:	08 95       	ret

0000037a <__udivmodhi4>:
 37a:	aa 1b       	sub	r26, r26
 37c:	bb 1b       	sub	r27, r27
 37e:	51 e1       	ldi	r21, 0x11	; 17
 380:	07 c0       	rjmp	.+14     	; 0x390 <__udivmodhi4_ep>

00000382 <__udivmodhi4_loop>:
 382:	aa 1f       	adc	r26, r26
 384:	bb 1f       	adc	r27, r27
 386:	a6 17       	cp	r26, r22
 388:	b7 07       	cpc	r27, r23
 38a:	10 f0       	brcs	.+4      	; 0x390 <__udivmodhi4_ep>
 38c:	a6 1b       	sub	r26, r22
 38e:	b7 0b       	sbc	r27, r23

00000390 <__udivmodhi4_ep>:
 390:	88 1f       	adc	r24, r24
 392:	99 1f       	adc	r25, r25
 394:	5a 95       	dec	r21
 396:	a9 f7       	brne	.-22     	; 0x382 <__udivmodhi4_loop>
 398:	80 95       	com	r24
 39a:	90 95       	com	r25
 39c:	bc 01       	movw	r22, r24
 39e:	cd 01       	movw	r24, r26
 3a0:	08 95       	ret

000003a2 <_exit>:
 3a2:	f8 94       	cli

000003a4 <__stop_program>:
 3a4:	ff cf       	rjmp	.-2      	; 0x3a4 <__stop_program>
